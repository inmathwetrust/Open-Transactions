#########################################################################
#									#
#									#
#	##	INSTALL - Debian, Ubuntu, other debian based	##	#
#									#
#									#
#########################################################################


## DEBIAN ONLY ##


On older version Debian or Ubuntu we may need to up-date GCC to a newer version:



###################
## DEBIAN STABLE ##

# if you are on DEBIAN (*not* Ubuntu) then you need to include backports and sid in your etc settings:

# Create backports and sid lists:

$ sudo mkdir -p /etc/apt/sources.list.d
$ sudo sh -c "echo 'deb http://ftp.us.debian.org/debian sid main' >> /etc/apt/sources.list.d/sid.list"
$ sudo sh -c "echo 'deb http://backports.debian.org/debian-backports squeeze-backports main' >> /etc/apt/sources.list.d/backports.list"

# Configure updates for only installed packages:
# append/ add:

##########################
## /etc/apt/preferences ##

Package: *
Pin: release n=squeeze-backports
Pin-Priority: 300

Package: *
Pin: release n=sid
Pin-Priority: 200

##########################

# install wget git build-essential libtool automake cmake pkg-config
$ sudo aptitude -t squeeze-backports install wget git libtool make cmake pkg-config automake hurd-dev

# install Open-Transactions library dependencies
$ sudo aptitude install libboost-all-dev libzmq-dev libmsgpack-dev libssl-dev
$ sudo aptitude install protobuf-compiler libprotobuf-dev

(NB: may need "libprotoc" if "protobuf-compiler" pkg not available on debian-like sytems)

## FINISH DEBIAN STABLE ##
##########################



# install general developer dependencies
$ sudo aptitude install wget git build-essential libtool automake cmake pkg-config

# install Open-Transactions library dependencies
$ sudo aptitude install libboost-all-dev libzmq-dev libmsgpack-dev libssl-dev 
$ sudo aptitude install protobuf-compiler libprotobuf-dev

(NB: may need "libprotoc" if "protobuf-compiler" pkg not available on debian-like sytems)

#########
## ALL ##


#########    Optional API deps:   #########

# install dev deps for SWIG JAVA
$ sudo aptitude install openjdk-6-jdk openjdk-6-source

# install dev deps for SWIG PERL5
$ sudo aptitude install libperl-dev

# install dev deps for SWIG PHP
$ sudo aptitude install php5-dev

# install dev deps for SWIG PYTHON
$ sudo aptitude install python-dev

# install dev deps for SWIG RUBY
$ sudo aptitude install ruby ruby-dev

# install dev deps for SWIG TCL
$ sudo aptitude install tcl tcl-dev

# install dev deps for SWIG CSHARP
$ sudo aptitude install mono-mcs monodevelop

# install dev deps for SWIG D
$ sudo aptitude install gdc
###########################################


## Make a dir for all the stuff ##
cd ~ && mkdir -p dev && cd dev


## IF NO OPENSSL 1.0.0 or higher ##

# if your version of Ubuntu doesn't include OpenSSL 1.0.0 or higher:
# can check with "openssl version"
#
# CAUTION !!: installing a spearate version of openssl on your OS can mess
# with your system and security, ONLY do this if you know what you are doing!
#
$ wget http://www.openssl.org/source/openssl-1.0.0j.tar.gz
$ tar xf openssl-1.0.0j.tar.gz
$ cd openssl-1.0.0j
$ ./config shared --prefix=$HOME/.local
$ make
$ make tests
$ make install
$ cd ..


#########
## ALL ##

# fetch chaiscript
$ git clone git://github.com/ChaiScript/ChaiScript.git

# build chaiscript
$ cd ChaiScript
$ git checkout c6a1d1ea7552a4ebbc877b1714e8d5adfe32d85a
$ cmake . -DCMAKE_INSTALL_PREFIX=$HOME/.local
$ make
$ make test
$ make install
$ cd ..

# setenv variable PKG_CONFIG_PATH
$ export PKG_CONFIG_PATH=$HOME/.local/lib/pkgconfig:$PKG_CONFIG_PATH



######## Download opentxs #############
# fetch O-T and prepare your copy for build

# 'stable' (alpha) source tar ball method
$ wget -c http://sourceforge.net/projects/opentxs/files/latest/download
$ tar -zxvf opentxs-*
$ cd opentxs-*
$ ./autogen.sh

### OR ###

# git pull latest development source method
$ git clone git://github.com/Open-Transactions/Open-Transactions.git
$ cd Open-Transactions
$ ./autogen.sh

########################################


$ ./configure --prefix=$HOME/.local


(NB: Default without the "--prefix=" installs sytem-wide, e.g. /usr/local ,
and will require admin privileges for "$ sudo make install" step below.

#########   Configure Options:   #########

Debug Mode:      --enable-debug
Signal Handling: --enable-sighandler
Warnings:        --enable-warnings

Release Mode:    --enable-release

No Boost:        --disable-boost
No C++11:        --disable-cxx11

(Optional)
System Keyring:  --with-keyring=ARG
Arguments:       gnome, kwallet, windows or mac

Enable OTAPI support for swig wrapper:
       Java:     --with-java
       Perl 5:   --with-perl5
       PHP:      --with-php
       Python:   --with-python
       Ruby:     --with-ruby
       TCL:      --with-tcl
       CSHARP:   --with-csharp
       D:        --with-d
       Go:       --with-go

##########################################


$ make uninstall (cleanup from possible previous build)


$ make

Build Multithreaded, need about 1gb of ram per thread.
-j (int, mutiple of of 2)


$ make install


###########   Miscellaneous Notes:   ###########

# add to ~/.profile

# set PATH so it includes user's .local root bin if it exists
if [ -d "$HOME/.local/bin" ] ; then
    PATH="$HOME/.local/bin:$PATH"
fi

# to avoid logging out and then logging back in again, just do ...
$ source ~/.profile

# to run otserver
$ otserver

# for python client api support export env variable
$ export PYTHONPATH=$HOME/.local/lib:$PYTHONPATH

# to look at an example wallet (WARNING : will reset all user data):
$ mkdir -p ~/.ot && cp -R sample-data/ot-sample-data/* ~/.ot

# also checkout tarball of sample contracts, baskets, server
$ cd ~/.local/share/opentxs
$ tar -xvf user-samples.tar.gz
$ ls
################################################
